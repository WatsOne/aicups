package core;

public enum PassengerState {
    /**
     * В этом состоянии пассажир ждет лифта. Новые пассажиры появляются на этаже именно в этом состоянии
     */
    WAITING_FOR_ELEVATOR(1),

    /**
     * В это состояние пассажир переходит, когда игрок отдает команду лифту "пригласить" пассажира
     * методом set_elevator. Если пассажир в этот момент находится в состояниях 1 или 3, он выбирает
     * ближайший лифт из всех предложенных на этом тике и начинает идти к лифту, переходя в состояние 2
     */
    MOVING_TO_ELEVATOR(2),

    /**
     * В это состояние пассажир переходит, если "пригласивший" его лифт уехал без него. Тогда пассажир
     * в состоянии 3 идет обратно к своему месту ожидания на этаже, переходя в состояние 3. В этот момент
     * его может пригласить другой лифт
     */
    RETURNING(3),

    /**
     * Пассажир идёт по лестнице. Если с момента появления пассажира на этаже прошло 500 тиков и он все
     * еще не находится в лифте, он перестаёт ждать лифта и идёт по лестнице. Перемещение пассажира с
     * этажа на лестницу при этом происходит мгновенно. Перемещение с лестницы на этаж также мгновенное.
     */
    MOVING_TO_FLOOR(4),

    /**
     * Пассажир находится в лифте. Если пассажира "пригласил" один из лифтов и пассажир сумел в него
     * войти (координаты x пассажира и лифта сравнялись, когда лифт был с сотоянии 3), то пассажир
     * считается зашедшим в лифт и будет ждать, когда лифт поедет на этаж. Если лифт остановится на
     * том этаже, на который пассажиру нужно, то пассажир после открытия дверей перейдет в состояние 6,
     * потратит какое-то количество тиков на выход из лифта и скроется на своём этаже. Там он проведёт
     * 500 тиков, после чего захочет на другой этаж и появится снова в состоянии 1 на том же этаже, на
     * котором он вышел из лифта
     */
    USING_ELEVATOR(5),

    /**
     * Пассажир выходит из лифта. Для этого ему нужно некоторое количество тиков (40 в данный момент)
     */
    EXITING(6);

    private int code;

    PassengerState(int code) {
        this.code = code;
    }

    public int getCode() {
        return code;
    }

    public static PassengerState parse(Integer code) {
        if (code == null) {
            return null;
        }

        for (PassengerState state : values()) {
            if (state.code == code) {
                return state;
            }
        }

        return null;
    }
}
